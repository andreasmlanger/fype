{"version":3,"sources":["settings.js","Video.js","Controls.js","VideoCall.js","App.js","index.js"],"names":["RtcTokenBuilder","RtcRole","require","appId","process","channelName","role","PUBLISHER","privilegeExpiredTs","Math","floor","Date","now","config","mode","codec","token","buildTokenWithUid","useClient","createClient","useMicrophoneAndCameraTracks","createMicrophoneAndCameraTracks","Video","props","users","tracks","screen","activeUsers","setActiveUsers","useState","fullscreen","setFullscreen","gridSpacing","setGridSpacing","calcBrowserSpacing","arr","max","length","useEffect","isMobile","_jsx","AgoraVideoPlayer","videoTrack","style","height","width","_jsxs","Grid","container","children","item","xs","map","user","onMouseDown","e","userId","filter","User","uid","makeUserFullScreen","Controls","client","stream","setStart","setInCall","setScreen","trackState","setTrackState","video","audio","mute","async","type","setEnabled","ps","margin","Button","variant","marginRight","color","onClick","MicIcon","MicOffIcon","VideocamIcon","VideocamOffIcon","ScreenShareIcon","StopScreenShareIcon","close","removeAllListeners","track","leave","leaveChannel","ExitToAppIcon","VideoCall","setUsers","start","ready","createScreenVideoTrack","useScreenVideoTrack","on","mediaType","subscribe","prevUsers","includes","audioTrack","play","stop","_sessionId","unpublish","join","name","error","console","log","_isClosed","publish","init","direction","zIndex","App","inCall","className","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da1f7579.chunk.js","sourcesContent":["import { createClient, createMicrophoneAndCameraTracks } from \"agora-rtc-react\";\r\n\r\nconst { RtcTokenBuilder, RtcRole } = require(\"agora-access-token\");\r\n\r\nconst appId = process.env.REACT_APP_AGORA_ID;\r\nconst appCertificate = process.env.REACT_APP_AGORA_CERTIFICATE;\r\nexport const channelName = \"main\";\r\nconst uid = 0;\r\nconst role = RtcRole.PUBLISHER;\r\nconst privilegeExpiredTs = Math.floor(Date.now() / 1000) + 3600;\r\nconst token = RtcTokenBuilder.buildTokenWithUid(\r\n  appId,\r\n  appCertificate,\r\n  channelName,\r\n  uid,\r\n  role,\r\n  privilegeExpiredTs\r\n);\r\n\r\nexport const config = { mode: \"rtc\", codec: \"vp8\", appId: appId, token: token };\r\nexport const useClient = createClient(config);\r\nexport const useMicrophoneAndCameraTracks = createMicrophoneAndCameraTracks();\r\n","import { AgoraVideoPlayer } from \"agora-rtc-react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { isMobile } from \"react-device-detect\";\r\n\r\nexport default function Video(props) {\r\n  const { users, tracks, screen } = props;\r\n  const [activeUsers, setActiveUsers] = useState([]);\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n  const [gridSpacing, setGridSpacing] = useState(12);\r\n  function calcMobileSpacing(arr) {\r\n    return arr.length > 1 ? 6 : 12;\r\n  }\r\n  function calcBrowserSpacing(arr) {\r\n    return Math.max(Math.floor(12 / (arr.length + 1)), 4);\r\n  }\r\n\r\n  function makeUserFullScreen(userId) {\r\n    if (!isMobile) {\r\n      if (gridSpacing !== 12) {\r\n        setActiveUsers(users.filter((User) => User.uid === userId));\r\n        setFullscreen(true);\r\n        return setGridSpacing(12);\r\n      } else {\r\n        setFullscreen(false);\r\n        return setGridSpacing(calcBrowserSpacing(users));\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActiveUsers(users);\r\n    isMobile\r\n      ? setGridSpacing(calcMobileSpacing(users))\r\n      : setGridSpacing(calcBrowserSpacing(users));\r\n  }, [users, tracks, screen]);\r\n\r\n  if (screen) {\r\n    // User shares screen\r\n    return (\r\n      <AgoraVideoPlayer\r\n        videoTrack={tracks[1]}\r\n        style={{ height: \"100%\", width: \"100%\" }}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <Grid container style={{ height: \"100%\" }}>\r\n        {!fullscreen && (\r\n          <Grid item xs={gridSpacing}>\r\n            <AgoraVideoPlayer\r\n              videoTrack={tracks[1]}\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n            />\r\n          </Grid>\r\n        )}\r\n        {activeUsers.length > 0 &&\r\n          activeUsers.map((user) => {\r\n            if (user.videoTrack) {\r\n              return (\r\n                <Grid\r\n                  item\r\n                  xs={gridSpacing}\r\n                  onMouseDown={(e) => makeUserFullScreen(user.uid)}\r\n                >\r\n                  <AgoraVideoPlayer\r\n                    videoTrack={user.videoTrack}\r\n                    key={user.uid}\r\n                    style={{ height: \"100%\", width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n              );\r\n            } else return null;\r\n          })}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\nimport { useClient } from \"./settings\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport MicOffIcon from \"@material-ui/icons/MicOff\";\r\nimport VideocamIcon from \"@material-ui/icons/Videocam\";\r\nimport VideocamOffIcon from \"@material-ui/icons/VideocamOff\";\r\nimport ScreenShareIcon from \"@material-ui/icons/ScreenShare\";\r\nimport StopScreenShareIcon from \"@material-ui/icons/StopScreenShare\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\n\r\nexport default function Controls(props) {\r\n  const client = useClient();\r\n  const { tracks, stream, setStart, setInCall, setScreen } = props;\r\n  const [trackState, setTrackState] = useState({\r\n    video: true,\r\n    audio: true,\r\n    screen: false,\r\n  });\r\n\r\n  const mute = async (type) => {\r\n    if (type === \"audio\") {\r\n      await tracks[0].setEnabled(!trackState.audio);\r\n      setTrackState((ps) => {\r\n        return { ...ps, audio: !ps.audio };\r\n      });\r\n    } else if (type === \"video\") {\r\n      await tracks[1].setEnabled(!trackState.video);\r\n      setTrackState((ps) => {\r\n        return { ...ps, video: !ps.video };\r\n      });\r\n    } else if (type === \"screen\") {\r\n      setScreen(!trackState.screen);\r\n      setTrackState((ps) => {\r\n        return { ...ps, screen: !ps.screen };\r\n      });\r\n    }\r\n  };\r\n\r\n  const leaveChannel = async () => {\r\n    if (stream) stream.close(); // end screen share\r\n    client.removeAllListeners();\r\n    setStart(false);\r\n    setInCall(false);\r\n    for (const track of tracks) {\r\n      track.close(); // close remaining tracks\r\n    }\r\n    await client.leave();\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: \"10px\" }}>\r\n      <Button\r\n        variant=\"contained\"\r\n        style={{ marginRight: \"5px\" }}\r\n        color={trackState.audio ? \"primary\" : \"secondary\"}\r\n        onClick={() => mute(\"audio\")}\r\n      >\r\n        {trackState.audio ? <MicIcon /> : <MicOffIcon />}\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        style={{ marginRight: \"5px\" }}\r\n        color={trackState.video ? \"primary\" : \"secondary\"}\r\n        onClick={() => mute(\"video\")}\r\n      >\r\n        {trackState.video ? <VideocamIcon /> : <VideocamOffIcon />}\r\n      </Button>\r\n      {!isMobile && (\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ marginRight: \"5px\" }}\r\n          color={trackState.screen ? \"primary\" : \"default\"}\r\n          onClick={() => mute(\"screen\")}\r\n        >\r\n          {trackState.screen ? <ScreenShareIcon /> : <StopScreenShareIcon />}\r\n        </Button>\r\n      )}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        onClick={() => leaveChannel()}\r\n      >\r\n        Leave\r\n        <ExitToAppIcon />\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  config,\r\n  useClient,\r\n  useMicrophoneAndCameraTracks,\r\n  channelName,\r\n} from \"./settings.js\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Video from \"./Video\";\r\nimport Controls from \"./Controls\";\r\nimport { createScreenVideoTrack } from \"agora-rtc-react\";\r\n\r\nexport default function VideoCall(props) {\r\n  const { setInCall } = props;\r\n  const [users, setUsers] = useState([]);\r\n  const [start, setStart] = useState(false);\r\n  const [screen, setScreen] = useState(false);\r\n  const client = useClient();\r\n  var { ready, tracks } = useMicrophoneAndCameraTracks();\r\n\r\n  // Screen share\r\n  var useScreenVideoTrack = createScreenVideoTrack();\r\n  var screenTrack = useScreenVideoTrack();\r\n  var stream = screenTrack[\"tracks\"];\r\n\r\n  if (screen && stream) {\r\n    tracks = [tracks[0], stream, tracks[1]];\r\n  }\r\n\r\n  useEffect(() => {\r\n    let init = async (name) => {\r\n      client.on(\"user-published\", async (user, mediaType) => {\r\n        await client.subscribe(user, mediaType);\r\n        if (mediaType === \"video\") {\r\n          setUsers((prevUsers) => {\r\n            if (prevUsers.includes(user)) {\r\n              return prevUsers; // when screen is shared\r\n            }\r\n            return [...prevUsers, user];\r\n          });\r\n        }\r\n        if (mediaType === \"audio\") {\r\n          user.audioTrack.play();\r\n        }\r\n      });\r\n      client.on(\"user-unpublished\", (user, mediaType) => {\r\n        if (mediaType === \"audio\") {\r\n          if (user.audioTrack) user.audioTrack.stop();\r\n        }\r\n        if (mediaType === \"video\") {\r\n          setUsers((prevUsers) => {\r\n            return prevUsers.filter((User) => User.uid !== user.uid);\r\n          });\r\n        }\r\n      });\r\n      client.on(\"user-left\", (user) => {\r\n        setUsers((prevUsers) => {\r\n          return prevUsers.filter((User) => User.uid !== user.uid);\r\n        });\r\n      });\r\n      if (client._sessionId) client.unpublish(); // unpublish first\r\n      try {\r\n        await client.join(config.appId, name, config.token, null);\r\n      } catch (error) {\r\n        console.log(\"error\");\r\n      }\r\n      if (tracks && !tracks[0]._isClosed && !tracks[1]._isClosed)\r\n        await client.publish([tracks[0], tracks[1]]);\r\n      setStart(true);\r\n    };\r\n    if (ready && tracks) {\r\n      try {\r\n        init(channelName);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  }, [client, ready, tracks]);\r\n\r\n  return (\r\n    <Grid container direction=\"column\" style={{ height: \"100%\" }}>\r\n      <Grid item style={{ height: \"0%\", zIndex: 1 }}>\r\n        {ready && tracks && (\r\n          <Controls\r\n            tracks={tracks}\r\n            stream={stream}\r\n            setStart={setStart}\r\n            setInCall={setInCall}\r\n            setScreen={setScreen}\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Grid item style={{ height: \"100%\" }}>\r\n        {start && tracks && (\r\n          <Video tracks={tracks} users={users} screen={screen} />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport VideoCall from \"./VideoCall\";\n\nfunction App() {\n  const [inCall, setInCall] = useState(false);\n  return (\n    <div className=\"App\" style={{ height: \"100%\" }}>\n      {inCall ? (\n        <VideoCall setInCall={setInCall} />\n      ) : (\n        <div className=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => setInCall(true)}\n          >\n            Join Call\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}